---
// Switch.astro

export interface Props {
  id: string
  label: string
}

const { id, label } = Astro.props
---

<div class='my-4 flex items-center justify-between'>
  <span class='text-gray-700 dark:text-gray-400'>{label}</span>
  <div class='relative inline-flex w-64 cursor-pointer items-center'>
    <input
      type='range'
      min='0'
      max='4'
      step='1'
      id={id}
      name={id}
      class='relative z-10 w-full'
      value='0'
         
    />
    <div
      class='absolute left-0 top-1/2 z-0 flex h-2.5 w-full -translate-y-1/2 transform items-center justify-between rounded border border-gray-400'
    >
      <div
        class='relative h-full w-1/5 rounded-l bg-gray-500'
        id={`${id}-color-0`}
      >
        <span
          class='text-tiny absolute bottom-[-20px] left-1/2 -translate-x-1/2 transform text-gray-700 dark:text-gray-400'
          >nulo</span
        >
      </div>
      <div class='relative h-full w-1/5 bg-green-400' id={`${id}-color-1`}>
        <span
          class='text-tiny absolute bottom-[-20px] left-1/2 -translate-x-1/2 transform text-gray-700 dark:text-gray-400'
          >bajo</span
        >
      </div>
      <div class='relative h-full w-1/5 bg-white' id={`${id}-color-2`}>
        <span
          class='text-tiny absolute bottom-[-20px] left-1/2 -translate-x-1/2 transform text-gray-700 dark:text-gray-400'
          >medio</span
        >
      </div>
      <div class='relative h-full w-1/5 bg-yellow-300' id={`${id}-color-3`}>
        <span
          class='text-tiny absolute bottom-[-20px] left-1/2 -translate-x-1/2 transform text-gray-700 dark:text-gray-400'
          >alto</span
        >
      </div>
      <div        class='relative h-full w-1/5 rounded-r bg-red-500'        id={`${id}-color-4`}
      >
        <span
          class='text-tiny absolute bottom-[-20px] left-1/2 -translate-x-1/2 transform text-gray-700 dark:text-gray-400'
          >muy alto</span
        >
      </div>
    </div>
  </div>
</div>

<script>
  // Declarar la función updateSlider dentro del bloque script
  function updateSlider(event) {
  const id = event.target.id;  // Obtén el ID del input
  const value = event.target.value;  // Obtén el valor del slider

  // Actualizar la opacidad de los colores según el valor del slider
  for (let i = 0; i <= 4; i++) {
    document.getElementById(`${id}-color-${i}`).style.opacity =
      i == value ? '1' : '0.3';
  }

  console.log("cambio el switch", id, "valor:", value); // Mostrar en consola el ID y valor del slider
}

  document.addEventListener('DOMContentLoaded', () => {
    const sliders = document.querySelectorAll('input[type="range"]'); // Seleccionamos todos los sliders

    sliders.forEach(slider => {
      slider.addEventListener('input', updateSlider); // Usamos addEventListener en lugar de oninput
    });
  });


</script>



<style>
  input[type='range']::-webkit-slider-thumb {
    width: 20px;
    height: 20px;
    -webkit-appearance: none;
    appearance: none;
    background: white;
    border: 2px solid gray;
    border-radius: 50%;
    margin-top: -9px; /* Center the thumb */
  }

  input[type='range']::-moz-range-thumb {
    width: 20px;
    height: 20px;
    -moz-appearance: none;
    appearance: none;
    background: white;
    border: 2px solid gray;
    border-radius: 50%;
  }

  input[type='range']::-ms-thumb {
    width: 20px;
    height: 20px;
    appearance: none;
    background: white;
    border: 2px solid gray;
    border-radius: 50%;
  }

  input[type='range'] {
    -webkit-appearance: none;
    width: 100%;
    height: 2.5px;
    background: transparent;
    position: relative;
    z-index: 10;
  }

  input[type='range']:focus {
    outline: none;
  }

  .text-tiny {
    font-size: 0.6rem; /* Custom smaller size */
  }
</style>
